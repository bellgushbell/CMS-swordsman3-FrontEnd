import React, { useContext, useState } from "react";
import {
  TextField,
  Button,
  Box,
  Typography,
  IconButton,
  InputAdornment,
  useMediaQuery,
  Menu,
  MenuItem,
} from "@mui/material";
import { Visibility, VisibilityOff } from "@mui/icons-material";
import { useNavigate } from "react-router-dom";
import { useTranslation } from "react-i18next";
import { AccountCircle, Language } from "@mui/icons-material"; // üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
import WbSunnyIcon from "@mui/icons-material/WbSunny"; // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏µ‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á
import NightsStayIcon from "@mui/icons-material/NightsStay"; // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏µ‡∏°‡∏°‡∏∑‡∏î
import * as Yup from "yup";
import { postRequest } from "../services/api";
import { AuthContext } from "../context/AuthContext"; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ AuthContext

function Login({ isDarkMode, setIsDarkMode, changeLanguage, theme }) {
  const { login } = useContext(AuthContext); // ‡πÉ‡∏ä‡πâ Context ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô login

  const { t } = useTranslation();
  const [data, setData] = useState({
    username: "",
    password: "",
  });
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState({});
  const navigate = useNavigate();
  const [anchorEl, setAnchorEl] = useState(null);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á schema validation ‡∏î‡πâ‡∏ß‡∏¢ Yup
  const validationSchema = Yup.object({
    username: Yup.string()
      .required("Username is required")
      .min(3, "Username must be at least 3 characters"),
    password: Yup.string()
      .required("Password is required")
      .min(6, "Password must be at least 6 characters"),
  });

  const validateField = async (fieldName, value) => {
    try {
      await validationSchema.validateAt(fieldName, { [fieldName]: value });
      return ""; // If no error, return empty string
    } catch (err) {
      return err.message;
    }
  };

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ (‡∏ñ‡πâ‡∏≤ < 600px ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠)
  const isMobile = useMediaQuery("(max-width:600px)");

  const handleLogin = async (e) => {
    e.preventDefault(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠ submit form

    const datalogin = await postRequest(
      "database/admin/process_login.php",
      data
    ); // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
    // console.log(datalogin); // ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API

    if (datalogin.status === 200) {
      // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      let fieldErrors = {}; // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

      // Validate each field by looping through the keys
      for (const field in data) {
        if (data.hasOwnProperty(field)) {
          const error = await validateField(field, data[field]); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
          if (error) {
            fieldErrors[field] = error; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô fieldErrors
          }
        }
      }

      if (Object.keys(fieldErrors).length > 0) {
        setError(fieldErrors); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      } else {
        // console.log("Form submitted successfully", data); // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        // await login(data.username, data.password);  // ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á ‡πÜ (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
        const userData = datalogin.data; // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ API ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå data
        login(userData.data); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Context
        navigate("/content"); // ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ Dashboard ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
      }
    } else {
      // ‡∏´‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      setError({ api: "Login failed, please check your credentials" }); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å API
    }
  };

  const handleMenuOpen = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handleMenuClose = () => {
    setAnchorEl(null);
  };

  const handleLanguageChange = (lng) => {
    changeLanguage(lng);
    handleMenuClose(); // ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  };

  return (
    <Box
      sx={{
        display: "flex",
        flexDirection: "column",
        justifyContent: "center",
        alignItems: "center",
        height: "100vh",
        background: theme.palette.background_login,
        position: "relative",
      }}
    >
      {/* üîπ Box ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ò‡∏µ‡∏°‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏≤ */}
      <Box
        sx={{
          display: "flex",
          alignItems: "start",
          justifyContent: "space-between",
          width: "90%",
          maxWidth: 900,
          background: theme.navbar.background,
          borderRadius: 3,
          padding: 1,
          position: "relative", // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        }}
      >
        {/* üîπ ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô */}
        <Box
          sx={{
            display: "flex",
            flexDirection: isMobile ? "column" : "row",
            alignItems: "center",
            justifyContent: "center",
            width: "100%",
            maxWidth: 900,
            background: theme.palette.background_BoxLogin.main,
            borderRadius: 3,
            boxShadow: "0px 4px 30px rgba(0, 0, 0, 0.1)",
            backdropFilter: "blur(10px)",
            padding: 4,
            position: "relative",
          }}
        >
          {/* üîπ ‡∏£‡∏π‡∏õ‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô */}
          <Box
            sx={{
              flex: 1,
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              width: isMobile ? "100%" : "50%",
              padding: 2,
            }}
          >
            <img
              src="../images/free-icon-cms-2867263.png"
              alt="Mascot"
              style={{ width: "80%", maxWidth: 250, height: "auto" }}
            />
          </Box>

          {/* üîπ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô */}
          <Box
            sx={{
              flex: 1,
              width: isMobile ? "100%" : "50%",
              textAlign: "center",
              padding: 2,
            }}
          >
            <Typography
              variant="h4"
              gutterBottom
              sx={{
                color: theme.palette.text.main,
                fontWeight: "bold",
                textTransform: "uppercase",
                letterSpacing: 1.5,
                textAlign: "center",
                background: `linear-gradient(45deg, ${theme.palette.text.main}, ${theme.palette.text.main})`,
                WebkitBackgroundClip: "text",
                WebkitTextFillColor: "transparent",
              }}
            >
              {t("login")}
            </Typography>

            <form onSubmit={handleLogin}>
              <TextField
                label={t("username")}
                variant="outlined"
                fullWidth
                margin="normal"
                value={data?.username}
                onChange={(e) => {
                  setData((prev) => ({ ...prev, username: e.target.value }));
                  setError((prev) => ({ ...prev, username: "" })); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï error ‡∏Ç‡∏≠‡∏á username ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå
                }}
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end">
                      <AccountCircle />
                    </InputAdornment>
                  ),
                }}
                error={Boolean(error.username)}
                helperText={error.username || ""}
              />

              <TextField
                label={t("password")}
                variant="outlined"
                type={showPassword ? "text" : "password"}
                fullWidth
                margin="normal"
                value={data?.password}
                onChange={(e) => {
                  setData((prev) => ({ ...prev, password: e.target.value }));
                }}
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        onClick={() => setShowPassword(!showPassword)}
                        edge="end"
                      >
                        {showPassword ? <VisibilityOff /> : <Visibility />}
                      </IconButton>
                    </InputAdornment>
                  ),
                }}
                error={Boolean(error.password)} // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á
                helperText={error.password || ""}
              />
              <Button
                type="submit"
                variant="contained"
                fullWidth
                disabled={!data?.username || !data?.password}
                sx={{
                  marginTop: 2,
                  padding: "12px 20px",
                  fontSize: "16px",
                  fontWeight: "bold",
                  textTransform: "uppercase",
                  bgcolor: theme.button.backgroundColor,
                  color: theme.button.textColor,
                  borderRadius: "8px",
                  transition: "all 0.3s ease",
                  boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.2)",
                  "&:hover": {
                    bgcolor: theme.palette.secondary.main,
                    transform: "scale(1.05)",
                  },
                  "&:disabled": {
                    bgcolor: "#ccc",
                    color: "#888",
                    boxShadow: "none",
                  },
                }}
              >
                {t("login")}
              </Button>
            </form>
          </Box>
        </Box>

        {/* üîπ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ò‡∏µ‡∏° */}

        <IconButton onClick={() => setIsDarkMode(!isDarkMode)} color="default">
          {isDarkMode ? <NightsStayIcon /> : <WbSunnyIcon />}
        </IconButton>
        {/* üîπ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤ */}
        <IconButton
          color="inherit"
          sx={{
            color: theme.palette.text.main, // ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏à‡∏≤‡∏Å text.main ‡πÉ‡∏ô‡∏ò‡∏µ‡∏°
          }}
          onClick={handleMenuOpen}
        >
          <Language />
        </IconButton>
        <Menu
          anchorEl={anchorEl}
          open={Boolean(anchorEl)}
          onClose={handleMenuClose}
        >
          <MenuItem onClick={() => handleLanguageChange("en")}>EN</MenuItem>
          <MenuItem onClick={() => handleLanguageChange("th")}>TH</MenuItem>
          <MenuItem onClick={() => handleLanguageChange("zh")}>ZH</MenuItem>
        </Menu>
      </Box>
    </Box>
  );
}

export default Login;
